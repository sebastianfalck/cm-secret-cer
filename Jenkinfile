class JenkinsUtils {
    def steps
    JenkinsUtils(steps) { this.steps = steps }

    def getServer(ambiente, tipoAcceso) {
        def serverMap = [
            'drs'     : { -> steps.env.SERVER_DRS },
            'internal': { -> steps.env.SERVER_INTERNAL },
            'external': { -> steps.env.SERVER_EXTERNAL }
        ]
        if (ambiente?.toLowerCase() == 'drs') return serverMap['drs']()
        def key = tipoAcceso?.toLowerCase()
        return serverMap.get(key, serverMap['internal'])()
    }

    def getOcLoginCmd(server, token) {
        return "oc login --insecure-skip-tls-verify --server=${server} --token=${token}"
    }

    def getOcLogoutCmd() {
        return "oc logout"
    }

    def getChmodCmd(file) {
        return "chmod 644 ${file}"
    }

    def getCleanVarsCmd(nombre, resourceType) {
        return """oc set env deployment/${nombre} --list | grep ${resourceType} | awk '{print  \$2}' | while read VR; do echo \$VR; oc set env deployment/${nombre} \$VR-; done"""
    }

    def getSetFromCmd(nombre, resourceType) {
        return "oc set env deployment/${nombre} --from=${resourceType}/${nombre}"
    }

    def getScaleCmd(nombre, replicas) {
        return "oc scale deployment/${nombre} --replicas=${replicas}"
    }

    def getResourceCmd(resourceType, nombre, namespace, yamlFile) {
        def map = getResourceTypeMap()
        return map[resourceType]?.getResourceCmd?.call(nombre, namespace, yamlFile)
    }

    def getApplyCmd(resourceType, nombre) {
        def map = getResourceTypeMap()
        return map[resourceType]?.getApplyCmd?.call(nombre)
    }

    def getBackupCmd(resourceType, nombre, namespace, backupFile) {
        def map = getResourceTypeMap()
        return map[resourceType]?.getBackupCmd?.call(nombre, namespace, backupFile)
    }

    def getCreateCmd(resourceType, nombre) {
        def map = getResourceTypeMap()
        return map[resourceType]?.getCreateCmd?.call(nombre)
    }

    def existsCmd(resourceType, nombre, namespace) {
        def map = getResourceTypeMap()
        return map[resourceType]?.existsCmd?.call(nombre, namespace)
    }

    def deleteCmd(resourceType, nombre, namespace) {
        def map = getResourceTypeMap()
        return map[resourceType]?.deleteCmd?.call(nombre, namespace)
    }

    private def getResourceTypeMap() {
        return [
            'certificados': [
                getResourceCmd: { nombre, namespace, yamlFile ->
                    steps.unstash 'FileCer.zip'
                    steps.sh 'unzip -o FileCer.zip -d certs'
                    def files = steps.sh(script: "find certs -type f", returnStdout: true).trim().split("\n")
                    def fromFileArgs = files.collect { f ->
                        def key = f.split('/')[-1]
                        return "--from-file=${key}=${f}"
                    }.join(' ')
                    return "oc create secret generic ${nombre}-file ${fromFileArgs} -n ${namespace} -o yaml --dry-run=client > ${yamlFile}"
                },

                getBackupCmd: { nombre, namespace, backupFile ->
                    return "oc get secret ${nombre}-file -n ${namespace} -o yaml > ${backupFile} || true"
                },
                existsCmd: { nombre, namespace -> "oc get secret ${nombre}-file -n ${namespace}" },
                getCreateCmd: { nombre -> "oc create secret generic ${nombre}-file" },
                getApplyCmd: { nombre -> "oc apply -f secret-${nombre}-file.yaml" },
                deleteCmd: { nombre, namespace -> "oc delete secret ${nombre}-file -n ${namespace}" }
            ],
            'secret': [
                getResourceCmd: { nombre, namespace, yamlFile ->
                    return "oc create secret generic ${nombre} --from-env-file=datos.txt -n ${namespace} -o yaml --dry-run=client > ${yamlFile}"
                },
                getBackupCmd: { nombre, namespace, backupFile ->
                    return "oc get secret ${nombre} -n ${namespace} -o yaml > ${backupFile} || true"
                },
                existsCmd: { nombre, namespace -> "oc get secret ${nombre} -n ${namespace}" },
                getCreateCmd: { nombre -> "oc create secret generic ${nombre}" },
                getApplyCmd: { nombre -> "oc apply -f secret-${nombre}.yaml" },
                deleteCmd: { nombre, namespace -> "oc delete secret ${nombre} -n ${namespace}" }
            ],
            'configmap': [
                getResourceCmd: { nombre, namespace, yamlFile ->
                    return "oc create configmap ${nombre} --from-env-file=datos.txt -n ${namespace} -o yaml --dry-run=client > ${yamlFile}"
                },
                getBackupCmd: { nombre, namespace, backupFile ->
                    return "oc get configmap ${nombre} -n ${namespace} -o yaml > ${backupFile} || true"
                },
                existsCmd: { nombre, namespace -> "oc get configmap ${nombre} -n ${namespace}" },
                getCreateCmd: { nombre -> "oc create configmap ${nombre}" },
                getApplyCmd: { nombre -> "oc apply -f configmap-${nombre}.yaml" },
                deleteCmd: { nombre, namespace -> "oc delete configmap ${nombre} -n ${namespace}" }
            ]
        ]
    }
}

pipeline {
    agent any
    environment {
        REPO_URL = ''
        REPO_CREDENTIALS = 'github-credentials'
        NOMBRE = "${params.NOMBRE}"
        AMBIENTE = "${params.AMBIENTE}"
        RESOURCE_TYPE = "${params.RESOURCE_TYPE}"
        SERVER_INTERNAL = 'https://internal.openshift.example:6443'
        SERVER_EXTERNAL = 'https://external.openshift.example:6443'
        SERVER_DRS = 'https://drs.openshift.example:6443'
    }
    parameters {
        string(name: 'NOMBRE', defaultValue: '', description: 'Nombre del microservicio')
        choice(name: 'AMBIENTE', choices: ['dev', 'uat', 'prd', 'drs'], description: 'Ambiente')
        choice(name: 'RESOURCE_TYPE', choices: ['configmap', 'secret', 'certificados'], description: 'Tipo de recurso')
        text(name: 'KEY_VALUE_PAIRS', defaultValue: '', description: 'Contenido para datos.txt')
        stashedFile 'FileCer.zip'
    }
    stages {
        stage('Checkout Project') {
            steps {
                script {
                    dir('project') {
                        git branch: 'main', url: env.REPO_URL, credentialsId: env.REPO_CREDENTIALS
                    }
                }
            }
        }

        stage('Leer configuración CSV') {
            steps {
                script {
                    def configLines = readFile('project/ProjectsJenkinsCardifCSV.csv').readLines().findAll { it.trim() }
                    def headers = configLines[0].split(';').collect { it.trim() }
                    def fila = configLines.drop(1).collect { line ->
                        def valores = line.split(';')
                        def filaMap = [:]
                        headers.eachWithIndex { key, idx ->
                            filaMap[key] = (valores.size() > idx ? valores[idx] : '').trim()
                        }
                        filaMap
                    }.find { it['appName'] == env.NOMBRE }
                    writeFile file: "fila_${env.NOMBRE}.json", text: groovy.json.JsonOutput.toJson(fila)
                }
            }
        }

        stage('Generar datos.txt si aplica') {
            when {
                expression {
                    return env.RESOURCE_TYPE in ['configmap', 'secret']
                }
            }
            steps {
                script {
                    if (!params.KEY_VALUE_PAIRS?.trim()) {
                        error "KEY_VALUE_PAIRS no puede estar vacío para RESOURCE_TYPE ${env.RESOURCE_TYPE}"
                    }
                    writeFile file: 'datos.txt', text: params.KEY_VALUE_PAIRS
                }
            }
        }

        stage('Generar YAML del recurso') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    def utils = new JenkinsUtils(this)
                    def namespace = fila["NameSpace${env.AMBIENTE.capitalize()}"]
                    def server = utils.getServer(env.AMBIENTE, fila.usage)
                    def yamlFile = env.RESOURCE_TYPE == 'certificados' ? "${env.RESOURCE_TYPE}-${env.NOMBRE}-file.yaml" : "${env.RESOURCE_TYPE}-${env.NOMBRE}.yaml"

                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: 'TOKEN', password: fila["Token${env.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, fila["Token${env.AMBIENTE.capitalize()}"])
                        sh utils.getResourceCmd(env.RESOURCE_TYPE, env.NOMBRE, namespace, yamlFile)
                        echo "YAML generado: ${yamlFile}"
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }

        stage('Backup') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    def utils = new JenkinsUtils(this)
                    def fecha = new Date().format("yyyy-MM-dd")
                    def namespace = fila["NameSpace${env.AMBIENTE.capitalize()}"]
                    def server = utils.getServer(env.AMBIENTE, fila.usage)
                    def backupDir = "backup/${fila.country}/${fila.project}/${env.NOMBRE}/${env.AMBIENTE.toUpperCase()}/${env.RESOURCE_TYPE}"
                    def backupFile = "${backupDir}/${env.RESOURCE_TYPE}-${env.NOMBRE}-${fecha}.yaml"

                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: 'TOKEN', password: fila["Token${env.AMBIENTE.capitalize()}"]]]]) {
                        sh "mkdir -p ${backupDir}"
                        sh utils.getOcLoginCmd(server, fila["Token${env.AMBIENTE.capitalize()}"])
                        sh utils.getBackupCmd(env.RESOURCE_TYPE, env.NOMBRE, namespace, backupFile)
                        sh utils.getChmodCmd(backupFile)
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }

        stage('Eliminar recurso si existe') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    def utils = new JenkinsUtils(this)
                    def namespace = fila["NameSpace${env.AMBIENTE.capitalize()}"]
                    def server = utils.getServer(env.AMBIENTE, fila.usage)

                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: 'TOKEN', password: fila["Token${env.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, fila["Token${env.AMBIENTE.capitalize()}"])
                        def exists = sh(script: utils.existsCmd(env.RESOURCE_TYPE, env.NOMBRE, namespace), returnStatus: true)
                        if (exists == 0) {
                            sh utils.deleteCmd(env.RESOURCE_TYPE, env.NOMBRE, namespace)
                        } else {
                            echo "No se encontró recurso para eliminar, continuando..."
                        }
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }
        stage('Recrear recurso y reiniciar despliegue') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    def utils = new JenkinsUtils(this)
                    def namespace = fila["NameSpace${env.AMBIENTE.capitalize()}"]
                    def server = utils.getServer(env.AMBIENTE, fila.usage)

                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: 'TOKEN', password: fila["Token${env.AMBIENTE.capitalize()}"]]]]) {
                        sh utils.getOcLoginCmd(server, fila["Token${env.AMBIENTE.capitalize()}"])
                        sh utils.getApplyCmd(env.RESOURCE_TYPE, env.NOMBRE)
                        sh utils.getScaleCmd(env.NOMBRE, 0)

                        if (env.RESOURCE_TYPE != 'certificados') {
                            sh utils.getCleanVarsCmd(env.NOMBRE, env.RESOURCE_TYPE)
                            sh utils.getSetFromCmd(env.NOMBRE, env.RESOURCE_TYPE)
                        }

                        
                        sh utils.getScaleCmd(env.NOMBRE, 1)
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }
    }
}
