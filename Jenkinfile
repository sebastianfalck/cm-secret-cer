class JenkinsUtils {
    def steps
    JenkinsUtils(steps) { this.steps = steps }

    def getServer(ambiente, tipoAcceso) {
        def serverMap = [
            'drs'     : { -> steps.env.SERVER_DRS },
            'internal': { -> steps.env.SERVER_INTERNAL },
            'external': { -> steps.env.SERVER_EXTERNAL }
        ]
        if (ambiente?.toLowerCase() == 'drs') return serverMap['drs']()
        def key = tipoAcceso?.toLowerCase()
        return serverMap.get(key, serverMap['internal'])()
    }

    def getOcLoginCmd(server, token) {
        return "oc login --insecure-skip-tls-verify --server=${server} --token=${token}"
    }

    def getOcLogoutCmd() {
        return "oc logout"
    }

    def getChmodCmd(file) {
        return "chmod 644 ${file}"
    }

    def getCleanVarsCmd(nombre, resourceType) {
        return """oc set env deployment/${nombre} --list | grep ${resourceType} | awk '{print  \$2}' | while read VR; do echo \$VR; oc set env deployment/${nombre} \$VR-; done"""
    }

    def getSetFromCmd(nombre, resourceType) {
        return "oc set env deployment/${nombre} --from=${resourceType}/${nombre}"
    }

    def getScaleCmd(nombre, replicas) {
        return "oc scale deployment/${nombre} --replicas=${replicas}"
    }

    def getResourceCmd(resourceType, nombre, namespace, yamlFile) {
        def map = getResourceTypeMap()
        return map[resourceType]?.getResourceCmd?.call(nombre, namespace, yamlFile)
    }

    def getBackupCmd(resourceType, nombre, namespace, backupFile) {
        def map = getResourceTypeMap()
        return map[resourceType]?.getBackupCmd?.call(nombre, namespace, backupFile)
    }

    def existsCmd(resourceType, nombre, namespace) {
        def map = getResourceTypeMap()
        return map[resourceType]?.existsCmd?.call(nombre, namespace)
    }

    def deleteCmd(resourceType, nombre, namespace) {
        def map = getResourceTypeMap()
        return map[resourceType]?.deleteCmd?.call(nombre, namespace)
    }

    private def getResourceTypeMap() {
        return [
            'certificados': [
                getResourceCmd: { nombre, namespace, yamlFile ->
                    steps.unstash 'FileCer.zip'
                    steps.sh 'unzip -o FileCer.zip -d certs'
                    def files = steps.sh(script: "ls certs", returnStdout: true).trim().split("\n")
                    def fromFileArgs = files.collect { f -> "--from-file=${f}=certs/${f}" }.join(' ')
                    return "oc create secret generic ${nombre}-file ${fromFileArgs} -n ${namespace} -o yaml --dry-run=client > ${yamlFile}"
                },
                getBackupCmd: { nombre, namespace, backupFile ->
                    return "oc get secret ${nombre}-file -n ${namespace} -o yaml > ${backupFile} || true"
                },
                existsCmd: { nombre, namespace -> "oc get secret ${nombre}-file -n ${namespace}" },
                deleteCmd: { nombre, namespace -> "oc delete secret ${nombre}-file -n ${namespace}" }
            ],
            'secret': [
                getResourceCmd: { nombre, namespace, yamlFile ->
                    return "oc create secret generic ${nombre} --from-env-file=datos.txt -n ${namespace} -o yaml --dry-run=client > ${yamlFile}"
                },
                getBackupCmd: { nombre, namespace, backupFile ->
                    return "oc get secret ${nombre} -n ${namespace} -o yaml > ${backupFile} || true"
                },
                existsCmd: { nombre, namespace -> "oc get secret ${nombre} -n ${namespace}" },
                deleteCmd: { nombre, namespace -> "oc delete secret ${nombre} -n ${namespace}" }
            ],
            'configmap': [
                getResourceCmd: { nombre, namespace, yamlFile ->
                    return "oc create configmap ${nombre} --from-env-file=datos.txt -n ${namespace} -o yaml --dry-run=client > ${yamlFile}"
                },
                getBackupCmd: { nombre, namespace, backupFile ->
                    return "oc get configmap ${nombre} -n ${namespace} -o yaml > ${backupFile} || true"
                },
                existsCmd: { nombre, namespace -> "oc get configmap ${nombre} -n ${namespace}" },
                deleteCmd: { nombre, namespace -> "oc delete configmap ${nombre} -n ${namespace}" }
            ]
        ]
    }
}

pipeline {
    agent any
    environment {
        REPO_URL = ''
        REPO_CREDENTIALS = 'github-credentials'
        NOMBRE = "${params.NOMBRE}"
        AMBIENTE = "${params.AMBIENTE}"
        RESOURCE_TYPE = "${params.RESOURCE_TYPE}"
        SERVER_INTERNAL = 'https://internal.openshift.example:6443'
        SERVER_EXTERNAL = 'https://external.openshift.example:6443'
        SERVER_DRS = 'https://drs.openshift.example:6443'
    }
    parameters {
        string(name: 'NOMBRE', defaultValue: '', description: 'Nombre del microservicio')
        choice(name: 'AMBIENTE', choices: ['dev', 'uat', 'prd', 'drs'], description: 'Ambiente')
        choice(name: 'RESOURCE_TYPE', choices: ['configmap', 'secret', 'certificados'], description: 'Tipo de recurso')
        text(name: 'KEY_VALUE_PAIRS', defaultValue: '', description: 'Contenido para datos.txt')
        stashedFile 'FileCer.zip'
    }
    stages {
        stage('Checkout Project') {
            steps {
                dir('project') {
                    git branch: 'main', url: env.REPO_URL, credentialsId: env.REPO_CREDENTIALS
                }
            }
        }

        stage('Cargar variables del microservicio') {
            steps {
                script {
                    def archivo_csv = 'project/ProjectsJenkinsCardifCSV.csv'
                    def configLines = readFile(archivo_csv).readLines().findAll { it.trim() }
                    if (!configLines) error "El archivo CSV está vacío o no existe."
                    def headers = configLines[0].split(';').collect { it.trim() }
                    def appNameIdx = headers.findIndexOf { it.equalsIgnoreCase('appName') }
                    if (appNameIdx == -1) error "No se encontró la columna 'appName' en el CSV"
                    def fila = configLines.drop(1)
                        .collect { line ->
                            def valores = line.split(';')
                            def fila_limpia = [:]
                            headers.eachWithIndex { clave, idx ->
                                fila_limpia[clave.trim()] = (valores.size() > idx ? valores[idx] : '').trim().replaceAll(/^[\[]|[\]]\$/, '')
                            }
                            fila_limpia
                        }
                        .find { it['appName'] == env.NOMBRE }
                    if (!fila) error "No se encontró el microservicio con appName: ${env.NOMBRE}"
                    writeFile file: "fila_${env.NOMBRE}.json", text: groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(fila))
                }
            }
        }

        stage('Crear archivo datos.txt') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    if ((fila.RESOURCE_TYPE == 'configmap' || fila.RESOURCE_TYPE == 'secret') && !params.KEY_VALUE_PAIRS?.trim()) {
                        error "KEY_VALUE_PAIRS no puede estar vacío para RESOURCE_TYPE = ${fila.RESOURCE_TYPE}"
                    }
                    writeFile file: 'datos.txt', text: params.KEY_VALUE_PAIRS
                }
            }
        }

        stage('Generar YAML') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    def utils = new JenkinsUtils(this)
                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: 'TOKEN', password: fila["Token${env.AMBIENTE.capitalize()}"]]]]) {
                        def yamlFile = env.RESOURCE_TYPE == 'certificados' ? "${env.RESOURCE_TYPE}-${env.NOMBRE}-file.yaml" : "${env.RESOURCE_TYPE}-${env.NOMBRE}.yaml"
                        def server = utils.getServer(env.AMBIENTE, fila.usage ?: 'internal')
                        sh utils.getOcLoginCmd(server, fila["Token${env.AMBIENTE.capitalize()}"])
                        sh utils.getResourceCmd(env.RESOURCE_TYPE, env.NOMBRE, fila["Namespace${env.AMBIENTE.capitalize()}"], yamlFile)
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }

        // Backup, Delete, Apply
        stage('Backup recurso actual en OpenShift') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    def utils = new JenkinsUtils(this)
                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: 'TOKEN', password: fila["Token${env.AMBIENTE.capitalize()}"]]]]) {
                        def backupFile = env.RESOURCE_TYPE == 'certificados' ? "tmp/${env.RESOURCE_TYPE}-${env.NOMBRE}-file-${fila.FECHA}.yaml" : "tmp/${env.RESOURCE_TYPE}-${env.NOMBRE}-${fila.FECHA}.yaml"
                        def server = utils.getServer(env.AMBIENTE, fila.usage ?: 'internal')
                        sh "mkdir -p tmp"
                        sh utils.getOcLoginCmd(server, fila["Token${env.AMBIENTE.capitalize()}"])
                        sh utils.getBackupCmd(env.RESOURCE_TYPE, env.NOMBRE, fila["Namespace${env.AMBIENTE.capitalize()}"], backupFile)
                        sh utils.getChmodCmd(backupFile)
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }

        stage('Eliminar recurso existente si aplica') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    def utils = new JenkinsUtils(this)
                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: 'TOKEN', password: fila["Token${env.AMBIENTE.capitalize()}"]]]]) {
                        def server = utils.getServer(env.AMBIENTE, fila.usage ?: 'internal')
                        sh utils.getOcLoginCmd(server, fila["Token${env.AMBIENTE.capitalize()}"])
                        if (utils.existsCmd(env.RESOURCE_TYPE, env.NOMBRE, fila["Namespace${env.AMBIENTE.capitalize()}"])) {
                            if (sh(script: utils.existsCmd(env.RESOURCE_TYPE, env.NOMBRE, fila["Namespace${env.AMBIENTE.capitalize()}"]), returnStatus: true) == 0) {
                                sh utils.deleteCmd(env.RESOURCE_TYPE, env.NOMBRE, fila["Namespace${env.AMBIENTE.capitalize()}"])
                            }
                        }
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }

        stage('Modificación de deployment') {
            steps {
                script {
                    def fila = readJSON file: "fila_${env.NOMBRE}.json"
                    def utils = new JenkinsUtils(this)
                    wrap([$class: 'MaskPasswordsBuildWrapper', varPasswordPairs: [[var: 'TOKEN', password: fila["Token${env.AMBIENTE.capitalize()}"]]]]) {
                        def server = utils.getServer(env.AMBIENTE, fila.usage ?: 'internal')
                        sh utils.getOcLoginCmd(server, fila["Token${env.AMBIENTE.capitalize()}"])
                        sh utils.getScaleCmd(env.NOMBRE, 0)
                        if (env.RESOURCE_TYPE != 'certificados') {
                            sh utils.getCleanVarsCmd(env.NOMBRE, env.RESOURCE_TYPE)
                            sh utils.getSetFromCmd(env.NOMBRE, env.RESOURCE_TYPE)
                        }
                        sh utils.getScaleCmd(env.NOMBRE, 1)
                        sh utils.getOcLogoutCmd()
                    }
                }
            }
        }
    }
}
